---
import Layout from '../../layouts/Layout.astro';
import SubHeader from '../../components/SubHeader.astro';
import Footer from '../../components/Footer.astro';
import { articles } from '../../data/articles';

const articlesArray = Object.entries(articles).map(([slug, article]) => ({ ...article, slug }));

// Astroのpaginate機能を利用
export function getStaticPaths({ paginate }) {
  return paginate(articlesArray, { pageSize: 5 });
}

const { page } = Astro.props;

// pageオブジェクトが存在しない場合のエラーハンドリング
if (!page) {
  // 開発サーバーでエラーの原因を特定しやすくするためにコンソールにログを出力
  console.error("Pagination Error: The 'page' prop was not provided. The dev server might need a restart.");
  // ここで処理を中断することもできますが、今回はテンプレート側で対応します。
}

const articlesOnPage = page ? page.data : [];
---
<Layout>
  <SubHeader />
  <main>
    <section class="max-w-3xl mx-auto py-12 px-4">
      <h1 class="text-3xl font-bold mb-8 text-white">Diary</h1>

      {articlesOnPage.length > 0 && page ? (
        <>
          <div class="space-y-8">
            {articlesOnPage.map(article => (
              <a href={`/diary/${article.slug}/`} class="block bg-gray-900/50 dark:bg-gray-900/80 p-6 rounded-2xl shadow-lg border border-transparent hover:border-primary/50 transition-all duration-300 group">
                <div class="flex items-center gap-4 text-sm mb-3">
                  <p class="text-gray-400">{article.date}</p>
                </div>
                <h2 class="text-xl font-bold text-white mb-3 group-hover:text-primary transition-colors">{article.title}</h2>
                <div class="flex flex-wrap gap-2">
                  <span class="px-3 py-1 rounded-full text-xs font-bold bg-primary text-white shadow">{article.tag}</span>
                </div>
              </a>
            ))}
          </div>

          {/* Pagination */}
          <nav class="flex justify-center items-center gap-4 mt-12 text-white">
            {page.url.prev && (
              <a href={page.url.prev} class="px-4 py-2 bg-gray-800 rounded-md hover:bg-primary transition-colors">&lt;</a>
            )}
            
            {Array.from({ length: page.lastPage }, (_, i) => i + 1).map(num => (
              <a href={`/diary/${num === 1 ? '' : '/'+num}`} class={`px-4 py-2 rounded-md transition-colors ${num === page.currentPage ? 'bg-primary font-bold' : 'bg-gray-800 hover:bg-primary'}`}>
                {num}
              </a>
            ))}

            {page.url.next && (
              <a href={page.url.next} class="px-4 py-2 bg-gray-800 rounded-md hover:bg-primary transition-colors">&gt;</a>
            )}
          </nav>
        </>
      ) : (
        <div class="text-center text-gray-400">
          <p>記事の読み込みに失敗しました。</p>
          <p class="mt-2 text-sm">開発サーバーを再起動してみてください。</p>
        </div>
      )}
    </section>
  </main>
  <Footer />
</Layout>